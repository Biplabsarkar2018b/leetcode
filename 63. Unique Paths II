class Solution {
public:
     int dp(vector<vector<int>>& grid, int m, int n, vector<vector<int>>& memo) {
        if (m < 0 || n < 0 || grid[m][n] == 1) {
            return 0; // Obstacle or out of bounds
        }
        if (m == 0 && n == 0) {
            return 1; // Reached the destination
        }
        if (memo[m][n] != -1) {
            return memo[m][n]; // Return memoized result if available
        }

        // Compute the number of unique paths recursively
        int paths = dp(grid, m - 1, n, memo) + dp(grid, m, n - 1, memo);
        memo[m][n] = paths; // Memoize the result

        return paths;
    }

    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        vector<vector<int>> memo(m, vector<int>(n, -1));
        return dp(obstacleGrid, m - 1, n - 1, memo);
    }
};
