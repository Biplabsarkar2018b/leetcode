method 1-----------------------------




/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void helper(TreeNode* root,vector<int>& values){
        if(!root) return;

        helper(root->left,values);
        values.push_back(root->val);
        helper(root->right,values);
    }
    int countNodes(TreeNode* root) {
        vector<int> values;
        helper(root,values);
        return values.size();
    }
};




method 2----------------------------



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    int countNodes(TreeNode* root) {
        if(!root) return 0;

        int ln = countNodes(root->left);//this will bring the no of nodes in left side
        int rn = countNodes(root->right);//this will bring the no of nodes in right side

        return 1 + ln + rn;
        //adding 1 for the current node------------
    }
};
