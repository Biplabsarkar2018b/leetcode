class Solution {
public:
    void helper(vector<vector<int>>& graph,vector<int> path,vector<vector<int>>& paths,int curr,vector<bool>& visited){
        if(curr==graph.size()-1){
            path.push_back(curr);
            paths.push_back(path);
            return;
        }
        visited[curr] = true;
        path.push_back(curr);
        for(auto i:graph[curr]){
            if(!visited[i]){
                visited[i] = true;
                helper(graph,path,paths,i,visited);
                visited[i] = false;
            }
        }

        
    }
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        vector<bool> visited(graph.size(),false);
        vector<vector<int>> paths;
        vector<int> path;
        
        helper(graph,path,paths,0,visited);
        return paths;
    }
};






//more optimized---------------------------


class Solution {
public:
    // void helper(vector<vector<int>>& graph,vector<int> path,vector<vector<int>>& paths,int curr,vector<bool>& visited){
    //     if(curr==graph.size()-1){
    //         path.push_back(curr);
    //         paths.push_back(path);
    //         return;
    //     }
    //     visited[curr] = true;
    //     path.push_back(curr);
    //     for(auto i:graph[curr]){
    //         if(!visited[i]){
    //             visited[i] = true;
    //             helper(graph,path,paths,i,visited);
    //             visited[i] = false;
    //         }
    //     }

        
    // }

    void dfs(vector<vector<int>>& g, vector<vector<int>>& res, vector<int>& path, int cur) {
        path.push_back(cur);
        if (cur == g.size() - 1)
            res.push_back(path);
        else for (auto it: g[cur])
            dfs(g, res, path, it);
        path.pop_back();

    }
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
         vector<vector<int>> paths;
        vector<int> path;
        dfs(graph, paths, path, 0);
        return paths;
    }
};




