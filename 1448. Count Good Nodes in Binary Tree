/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int helper(TreeNode* root, int maxi){
        //if the node is null i.e. it can't be good node
        if(!root) return 0;

        
        //we are checking whether the current node's value is 
        // >= the maxi or not, if it is that means it's a good node
        // so we add 1 point for this node
        // otherwise we add 0 point for this node
        int g = maxi <= root->val ? 1 : 0;


        // we are updating our maxi with the max value between the 
        //maxi and current node's value
        maxi = max(maxi,root->val);


        //calling the function recursively for both the children
        int l =  helper(root->left,maxi);
        int r =  helper(root->right,maxi);


        //returning total no of good nodes
        return g + l + r;
    }
    int goodNodes(TreeNode* root) {
        if(!root) return 0;
        return helper(root,INT_MIN);

    }
};
