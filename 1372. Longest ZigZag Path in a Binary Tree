//TWO SOLUTIONS




/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    // Returns a pair of (leftZigzag, rightZigzag) values starting from the current node.
    pair<int, int> helper(TreeNode* root, int& maxZigzag) {
        if (!root) {
            return { 0, 0 };
        }

        auto leftZigzag = helper(root->left, maxZigzag);
        auto rightZigzag = helper(root->right, maxZigzag);

        // If we can move left from the current node, increment leftZigzag by 1, otherwise reset it to 0.
        int left = root->left ? leftZigzag.second + 1 : 0;
        // If we can move right from the current node, increment rightZigzag by 1, otherwise reset it to 0.
        int right = root->right ? rightZigzag.first + 1 : 0;

        // Update the maximum zigzag path length.
        maxZigzag = max(maxZigzag, max(left, right));

        return { left, right };
    }
   int longestZigZag(TreeNode* root) {
        int maxZigzag = 0;
        helper(root, maxZigzag);
        return maxZigzag;
    }
};

//ANOTHER SOLUTIONS

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    void helper(TreeNode* root,int& maxi, bool isLeft,int curr){
        if(!root) return ;

        maxi = max(maxi,curr);

        if(isLeft){
            //it is coming via left road

            //either go to right now and add point
            helper(root->right,maxi,false,curr+1);
            //or go left again and restart the path
            helper(root->left,maxi,true,1);
        }else{
            //it is coming via right road

            //either go to right again and restart the path
            helper(root->right,maxi,false,1);
            //or go to left and add point
            helper(root->left,maxi,true,curr+1);
        }
    }
    int longestZigZag(TreeNode* root) {
        int maxi = 0;
        //there should be two possibilities for two children
        helper(root,maxi,false,0);
        helper(root,maxi,true,0);
        return maxi;
    }
};
