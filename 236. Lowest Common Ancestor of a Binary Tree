/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool findPath(TreeNode* root, TreeNode* target, vector<TreeNode*>& path) {
        if (!root) return false;

        path.push_back(root);

        if (root == target) {
            return true;
        }

        if (findPath(root->left, target, path) || findPath(root->right, target, path)) {
            return true;
        }

        path.pop_back();
        return false;
    }

    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        vector<TreeNode*> pathToP, pathToQ;
        if (!findPath(root, p, pathToP) || !findPath(root, q, pathToQ)) {
            return nullptr; // One or both nodes not found in the tree.
        }

        TreeNode* lastMatched = nullptr;

        for (int i = 0; i < min(pathToP.size(), pathToQ.size()); i++) {
            if (pathToP[i] == pathToQ[i]) {
                lastMatched = pathToP[i];
            } else {
                break;
            }
        }
        return lastMatched;
    }
};


//optimized

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(!root) return NULL;

        if(root==p || root==q) return root;

        TreeNode* left = lowestCommonAncestor(root->left,p,q);
        TreeNode* right = lowestCommonAncestor(root->right,p,q);
  if (left && right) return root; // If both nodes found in different subtrees, return the current node as LCA.
        if (left) return left; // If one of the nodes found in the left subtree, return it as LCA.
        return right; 
    }
};
