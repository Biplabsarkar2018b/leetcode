/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //storing the ans here ->
    vector<int> ans;
    void h(TreeNode* root,int level){

        if(!root) return;

        //we are doing a reverse preorder traversal here
        //ie ->  root->right->left

        //so when the function goes to a level for the first time
        // it checks whether the level and the ds size are same or not
        // because that's how we know if that level's data is been
        //added or not
        if(ans.size()==level) ans.push_back(root->val);

        //then we increase the level and goes to children
        h(root->right,level+1);
        h(root->left,level+1);
    }
    vector<int> rightSideView(TreeNode* root) {
        h(root,0);
        return ans;
    }
};
